// Do not edit: this file is generated by flatdata's python generator from
// `osm.flatdata`.

#![allow(dead_code)]

use flatdata::Struct;

mod schema {
    pub mod resources {
        pub mod osm {
            pub const HEADER: &str = r#"namespace osm { struct Header {
    bbox_left: i64 : 64;
    bbox_right: i64 : 64;
    bbox_top: i64 : 64;
    bbox_bottom: i64 : 64;

    required_feature_first_idx: u32 : 32;
    required_features_size: u32 : 4;
    optional_feature_first_idx: u32 : 32;
    optional_features_size: u32 : 4;

    writingprogram_idx: u32 : 32;
    source_idx: u32 : 32;

    osmosis_replication_timestamp: i64 : 64;
    osmosis_replication_sequence_number: i64 : 64;
    osmosis_replication_base_url_idx: u32 : 32;
} }
namespace osm { @explicit_reference( Header.required_feature_first_idx, stringtable )
    @explicit_reference( Header.optional_feature_first_idx, stringtable )
    @explicit_reference( Header.writingprogram_idx, stringtable )
    @explicit_reference( Header.source_idx, stringtable )
    @explicit_reference( Header.osmosis_replication_base_url_idx, stringtable )
    header: Header; }"#;
            pub const NODES: &str = r#"namespace osm { struct Node {
    id: i64 : 64;
    lat: i64 : 64;
    lon: i64 : 64;
    tag_first_idx: u32 : 32;
    info_idx: u32 : 32;
} }
namespace osm { @explicit_reference( Node.tag_first_idx, tags )
    @explicit_reference( Node.info_idx, infos )
    nodes: vector<Node>; }"#;
            pub const WAYS: &str = r#"namespace osm { struct Way {
    id: i64 : 64;
    tag_first_idx: u32 : 32;
    ref_first_idx: u32 : 32;
    info_idx: u32 : 32;
} }
namespace osm { @explicit_reference( Way.tag_first_idx, tags )
    @explicit_reference( Way.info_idx, infos )
    ways: vector<Way>; }"#;
            pub const RELATIONS: &str = r#"namespace osm { struct Relation {
    id: i64 : 64;
    tag_first_idx: u32 : 32;
    relation_member_first_idx: u32 : 32;
    info_idx: u32 : 32;
} }
namespace osm { @explicit_reference( Relation.tag_first_idx, tags )
    @explicit_reference( Relation.relation_member_first_idx, relation_members )
    @explicit_reference( Relation.info_idx, infos )
    relations: vector<Relation>; }"#;
            pub const RELATION_MEMBERS: &str = r#"namespace osm { struct RelationMember {
    role_idx: u32 : 32;
    memid: u32 : 32;
    // populated by MEMBER_TYPE_* constants
    type: u32 : 2;
} }
namespace osm { relation_members: vector<RelationMember>; }"#;
            pub const TAGS: &str = r#"namespace osm { struct Tag {
    key_idx: u32 : 32;
    value_idx: u32 : 32;
} }
namespace osm { @explicit_reference( Tag.key_idx, stringtable )
    @explicit_reference( Tag.value_idx, stringtable )
    tags: vector<Tag>; }"#;
            pub const INFOS: &str = r#"namespace osm { struct Info {
    version: i32 : 32;
    timestamp: i64 : 64;
    changest: i64 : 64;
    uid: i32 : 32;
    user_idx: u32 : 32;
    visible: bool : 1;
} }
namespace osm { @explicit_reference( Info.user_idx, stringtable )
    infos: vector<Info>; }"#;
            pub const STRINGTABLE: &str = r#"namespace osm { /**
     * List of strings separated by \0.
     */
    stringtable: raw_data; }"#;
        }
    }
    pub mod structs {
        pub const INFO: &str = r#"namespace osm { struct Info {
    version: i32 : 32;
    timestamp: i64 : 64;
    changest: i64 : 64;
    uid: i32 : 32;
    user_idx: u32 : 32;
    visible: bool : 1;
} }"#;
        pub const TAG: &str = r#"namespace osm { struct Tag {
    key_idx: u32 : 32;
    value_idx: u32 : 32;
} }"#;
        pub const RELATION_MEMBER: &str = r#"namespace osm { struct RelationMember {
    role_idx: u32 : 32;
    memid: u32 : 32;
    // populated by MEMBER_TYPE_* constants
    type: u32 : 2;
} }"#;
        pub const RELATION: &str = r#"namespace osm { struct Relation {
    id: i64 : 64;
    tag_first_idx: u32 : 32;
    relation_member_first_idx: u32 : 32;
    info_idx: u32 : 32;
} }"#;
        pub const WAY: &str = r#"namespace osm { struct Way {
    id: i64 : 64;
    tag_first_idx: u32 : 32;
    ref_first_idx: u32 : 32;
    info_idx: u32 : 32;
} }"#;
        pub const NODE: &str = r#"namespace osm { struct Node {
    id: i64 : 64;
    lat: i64 : 64;
    lon: i64 : 64;
    tag_first_idx: u32 : 32;
    info_idx: u32 : 32;
} }"#;
        pub const HEADER: &str = r#"namespace osm { struct Header {
    bbox_left: i64 : 64;
    bbox_right: i64 : 64;
    bbox_top: i64 : 64;
    bbox_bottom: i64 : 64;

    required_feature_first_idx: u32 : 32;
    required_features_size: u32 : 4;
    optional_feature_first_idx: u32 : 32;
    optional_features_size: u32 : 4;

    writingprogram_idx: u32 : 32;
    source_idx: u32 : 32;

    osmosis_replication_timestamp: i64 : 64;
    osmosis_replication_sequence_number: i64 : 64;
    osmosis_replication_base_url_idx: u32 : 32;
} }"#;
        pub const OSM: &str = r#"namespace osm { struct Header {
    bbox_left: i64 : 64;
    bbox_right: i64 : 64;
    bbox_top: i64 : 64;
    bbox_bottom: i64 : 64;

    required_feature_first_idx: u32 : 32;
    required_features_size: u32 : 4;
    optional_feature_first_idx: u32 : 32;
    optional_features_size: u32 : 4;

    writingprogram_idx: u32 : 32;
    source_idx: u32 : 32;

    osmosis_replication_timestamp: i64 : 64;
    osmosis_replication_sequence_number: i64 : 64;
    osmosis_replication_base_url_idx: u32 : 32;
} }
namespace osm { struct Node {
    id: i64 : 64;
    lat: i64 : 64;
    lon: i64 : 64;
    tag_first_idx: u32 : 32;
    info_idx: u32 : 32;
} }
namespace osm { struct Way {
    id: i64 : 64;
    tag_first_idx: u32 : 32;
    ref_first_idx: u32 : 32;
    info_idx: u32 : 32;
} }
namespace osm { struct Relation {
    id: i64 : 64;
    tag_first_idx: u32 : 32;
    relation_member_first_idx: u32 : 32;
    info_idx: u32 : 32;
} }
namespace osm { struct RelationMember {
    role_idx: u32 : 32;
    memid: u32 : 32;
    // populated by MEMBER_TYPE_* constants
    type: u32 : 2;
} }
namespace osm { struct Tag {
    key_idx: u32 : 32;
    value_idx: u32 : 32;
} }
namespace osm { struct Info {
    version: i32 : 32;
    timestamp: i64 : 64;
    changest: i64 : 64;
    uid: i32 : 32;
    user_idx: u32 : 32;
    visible: bool : 1;
} }
namespace osm { const u32 INVALID_IDX = 0; }
namespace osm { const u8 MEMBER_TYPE_NODE = 0; }
namespace osm { const u8 MEMBER_TYPE_WAY = 1; }
namespace osm { const u8 MEMBER_TYPE_RELATION = 2; }
namespace osm { archive Osm {
    @explicit_reference( Header.required_feature_first_idx, stringtable )
    @explicit_reference( Header.optional_feature_first_idx, stringtable )
    @explicit_reference( Header.writingprogram_idx, stringtable )
    @explicit_reference( Header.source_idx, stringtable )
    @explicit_reference( Header.osmosis_replication_base_url_idx, stringtable )
    header: Header;

    @explicit_reference( Node.tag_first_idx, tags )
    @explicit_reference( Node.info_idx, infos )
    nodes: vector<Node>;

    @explicit_reference( Way.tag_first_idx, tags )
    @explicit_reference( Way.info_idx, infos )
    ways: vector<Way>;

    @explicit_reference( Relation.tag_first_idx, tags )
    @explicit_reference( Relation.relation_member_first_idx, relation_members )
    @explicit_reference( Relation.info_idx, infos )
    relations: vector<Relation>;
    relation_members: vector<RelationMember>;

    @explicit_reference( Tag.key_idx, stringtable )
    @explicit_reference( Tag.value_idx, stringtable )
    tags: vector<Tag>;

    @explicit_reference( Info.user_idx, stringtable )
    infos: vector<Info>;

    /**
     * List of strings separated by \0.
     */
    stringtable: raw_data;
} }"#;
    }
}

define_struct!(
    Info,
    InfoMut,
    schema::structs::INFO,
    29,
    (version, set_version, i32, 0, 32),
    (timestamp, set_timestamp, i64, 32, 64),
    (changest, set_changest, i64, 96, 64),
    (uid, set_uid, i32, 160, 32),
    (user_idx, set_user_idx, u32, 192, 32),
    (visible, set_visible, bool, 224, 1)
);

define_struct!(
    Tag,
    TagMut,
    schema::structs::TAG,
    8,
    (key_idx, set_key_idx, u32, 0, 32),
    (value_idx, set_value_idx, u32, 32, 32)
);

define_struct!(
    RelationMember,
    RelationMemberMut,
    schema::structs::RELATION_MEMBER,
    9,
    (role_idx, set_role_idx, u32, 0, 32),
    (memid, set_memid, u32, 32, 32),
    (type_, set_type, u32, 64, 2)
);

define_struct!(
    Relation,
    RelationMut,
    schema::structs::RELATION,
    20,
    (id, set_id, i64, 0, 64),
    (tag_first_idx, set_tag_first_idx, u32, 64, 32),
    (
        relation_member_first_idx,
        set_relation_member_first_idx,
        u32,
        96,
        32
    ),
    (info_idx, set_info_idx, u32, 128, 32)
);

define_struct!(
    Way,
    WayMut,
    schema::structs::WAY,
    20,
    (id, set_id, i64, 0, 64),
    (tag_first_idx, set_tag_first_idx, u32, 64, 32),
    (ref_first_idx, set_ref_first_idx, u32, 96, 32),
    (info_idx, set_info_idx, u32, 128, 32)
);

define_struct!(
    Node,
    NodeMut,
    schema::structs::NODE,
    32,
    (id, set_id, i64, 0, 64),
    (lat, set_lat, i64, 64, 64),
    (lon, set_lon, i64, 128, 64),
    (tag_first_idx, set_tag_first_idx, u32, 192, 32),
    (info_idx, set_info_idx, u32, 224, 32)
);

define_struct!(
    Header,
    HeaderMut,
    schema::structs::HEADER,
    69,
    (bbox_left, set_bbox_left, i64, 0, 64),
    (bbox_right, set_bbox_right, i64, 64, 64),
    (bbox_top, set_bbox_top, i64, 128, 64),
    (bbox_bottom, set_bbox_bottom, i64, 192, 64),
    (
        required_feature_first_idx,
        set_required_feature_first_idx,
        u32,
        256,
        32
    ),
    (
        required_features_size,
        set_required_features_size,
        u32,
        288,
        4
    ),
    (
        optional_feature_first_idx,
        set_optional_feature_first_idx,
        u32,
        292,
        32
    ),
    (
        optional_features_size,
        set_optional_features_size,
        u32,
        324,
        4
    ),
    (writingprogram_idx, set_writingprogram_idx, u32, 328, 32),
    (source_idx, set_source_idx, u32, 360, 32),
    (
        osmosis_replication_timestamp,
        set_osmosis_replication_timestamp,
        i64,
        392,
        64
    ),
    (
        osmosis_replication_sequence_number,
        set_osmosis_replication_sequence_number,
        i64,
        456,
        64
    ),
    (
        osmosis_replication_base_url_idx,
        set_osmosis_replication_base_url_idx,
        u32,
        520,
        32
    )
);

define_archive!(Osm, OsmBuilder,
    schema::structs::OSM;
    // struct resources
    (header, set_header,
        Header, schema::resources::osm::HEADER);
    // vector resources
    (nodes, set_nodes, start_nodes,
        Node, schema::resources::osm::NODES),
    (ways, set_ways, start_ways,
        Way, schema::resources::osm::WAYS),
    (relations, set_relations, start_relations,
        Relation, schema::resources::osm::RELATIONS),
    (relation_members, set_relation_members, start_relation_members,
        RelationMember, schema::resources::osm::RELATION_MEMBERS),
    (tags, set_tags, start_tags,
        Tag, schema::resources::osm::TAGS),
    (infos, set_infos, start_infos,
        Info, schema::resources::osm::INFOS);
    // multivector resources
;
    // raw data resources
    (stringtable, set_stringtable,
        schema::resources::osm::STRINGTABLE);
    // subarchives
;
    // optional subarchives
);
